import os
import joblib
import tkinter as tk
from tkinter import filedialog, messagebox
import sys

# Attempt to import pefile; handle import errors if it's not installed
try:
    import pefile  # Library for parsing PE (Portable Executable) files
except ImportError:
    messagebox.showerror("Error", "pefile library is not installed. Install it using 'pip install pefile'")
    sys.exit()

import hashlib

# Helper function for PyInstaller to locate resources
def resource_path(relative_path):
    try:
        # PyInstaller creates a temporary folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# Load the malware detection model
model_path = resource_path("malware_model.pkl")
try:
    model = joblib.load(model_path)
except FileNotFoundError:
    messagebox.showerror("Error", "Malware detection model 'malware_model.pkl' not found in the expected location.")
    sys.exit()
except Exception as e:
    messagebox.showerror("Error", f"Failed to load malware model: {e}")
    sys.exit()

# Function to extract features from a file
def extract_features(file_path):
    features = {}
    try:
        pe = pefile.PE(file_path, fast_load=True)
        pe.parse_data_directories()
        
        # Basic features extracted
        features['file_size'] = os.path.getsize(file_path)
        features['number_of_sections'] = len(pe.sections)
        entropy = sum(section.get_entropy() for section in pe.sections) / len(pe.sections)
        features['entropy'] = entropy

        # Prepare features for prediction
        return [features['file_size'], features['number_of_sections'], features['entropy']]
    except Exception as e:
        print(f"Error extracting features from {file_path}: {e}")
        return None

# Function to scan a file for malware
def scan_file(file_path):
    features = extract_features(file_path)
    if features is None:
        print(f"Could not extract features from file: {file_path}")
        return None
    
    # Prediction
    try:
        result = model.predict([features])[0]
        return "Malware Detected" if result == 1 else "File is Safe"
    except Exception as e:
        print(f"Error predicting file: {file_path}, {e}")
        return "Error in Prediction"

# Function to scan all files in a folder
def scan_folder(folder_path):
    malware_detected = False
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            result = scan_file(file_path)
            print(f"{file}: {result}")
            if result == "Malware Detected":
                malware_detected = True
    return "Malware Detected" if malware_detected else "No Malware Detected"

# GUI Setup with tkinter
def create_gui():
    def open_file():
        file_path = filedialog.askopenfilename(title="Select a file to scan")
        if file_path:
            result = scan_file(file_path)
            result_label.config(text=result)

    def open_folder():
        folder_path = filedialog.askdirectory(title="Select a folder to scan")
        if folder_path:
            result = scan_folder(folder_path)
            result_label.config(text=result)

    # Creating the main window
    root = tk.Tk()
    root.title("Malware Detection Tool")
    root.geometry("400x300")

    # UI elements
    tk.Label(root, text="Select a file or folder to scan for malware:", font=("Arial", 12)).pack(pady=10)
    
    file_button = tk.Button(root, text="Scan File", command=open_file, width=15)
    file_button.pack(pady=5)
    
    folder_button = tk.Button(root, text="Scan Folder", command=open_folder, width=15)
    folder_button.pack(pady=5)

    global result_label
    result_label = tk.Label(root, text="", font=("Arial", 10), wraplength=300)
    result_label.pack(pady=10)

    # Run the main loop
    root.mainloop()

# Run the GUI
if __name__ == "__main__":
    create_gui()
