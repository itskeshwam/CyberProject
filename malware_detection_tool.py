import os
import joblib
import tkinter as tk
from tkinter import filedialog, messagebox
import hashlib
import sys

# Attempt to import pefile; handle import errors if it's not installed
try:
    import pefile
except ImportError:
    messagebox.showerror("Error", "pefile library is not installed. Install it using 'pip install pefile'")
    sys.exit()

# Helper function to get the absolute path for resources
def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS  # PyInstaller temporary folder
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# Load the trained malware detection model
model_path = resource_path("malware_model.pkl")
try:
    model = joblib.load(model_path)
except FileNotFoundError:
    messagebox.showerror("Error", "Model 'malware_model.pkl' not found. Train the model using 'train_model.py'.")
    sys.exit()

# Extract features from a PE file
def extract_features(file_path):
    try:
        pe = pefile.PE(file_path, fast_load=True)
        pe.parse_data_directories()

        # Define feature extraction based on available columns in the dataset
        features = {
            "file_size": os.path.getsize(file_path),
            "number_of_sections": len(pe.sections),
            "entropy": sum(section.get_entropy() for section in pe.sections) / len(pe.sections),
            # Add other features here as needed based on your dataset columns
        }

        # Extract only the features required by the model
        return [features["file_size"], features["number_of_sections"], features["entropy"]]
    except Exception as e:
        print(f"Error extracting features: {e}")
        return None

# Scan a single file
def scan_file(file_path):
    features = extract_features(file_path)
    if features is None:
        return None  # Skip files with feature extraction errors
    result = model.predict([features])[0]
    return result  # Return 1 for malware, 0 for safe file

# GUI for malware detection
def create_gui():
    def open_file():
        file_path = filedialog.askopenfilename(title="Select a file to scan")
        if file_path:
            result = scan_file(file_path)
            if result is None:
                result_label.config(text="Could not scan file")
            else:
                result_label.config(text="Malware Detected" if result == 1 else "File is Safe")

    def open_folder():
        folder_path = filedialog.askdirectory(title="Select a folder to scan")
        if folder_path:
            malware_detected = False
            scanned_files = 0

            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    result = scan_file(file_path)
                    scanned_files += 1
                    if result == 1:
                        malware_detected = True
                        break  # Stop scanning if malware is found
            
            # Display final result
            if malware_detected:
                result_text = f"Malware Detected in folder '{folder_path}' after scanning {scanned_files} files."
            else:
                result_text = f"No Malware Found in folder '{folder_path}' after scanning {scanned_files} files."
            
            result_label.config(text=result_text)

    # Create the main window
    root = tk.Tk()
    root.title("Malware Detection Tool")
    root.geometry("400x300")

    # UI Elements
    tk.Label(root, text="Select a file or folder to scan for malware:", font=("Arial", 12)).pack(pady=10)
    file_button = tk.Button(root, text="Scan File", command=open_file, width=15)
    file_button.pack(pady=5)
    folder_button = tk.Button(root, text="Scan Folder", command=open_folder, width=15)
    folder_button.pack(pady=5)

    global result_label
    result_label = tk.Label(root, text="", font=("Arial", 10), wraplength=300)
    result_label.pack(pady=10)

    root.mainloop()

# Run the GUI
if __name__ == "__main__":
    create_gui()
